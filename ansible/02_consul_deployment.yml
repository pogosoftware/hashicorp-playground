---
- name: Hashicorp - Consul
  hosts: all
  gather_facts: true
  become: true

  vars_files:
    - vars/common.yml
    - vars/multipass.yml
    - vars/pki.yml
    - vars/consul.yml

  tasks:
    - name: Consul - Requirements
      block:
        - name: 'Consul - Requirements: Ensure unzip and jq are installed'
          ansible.builtin.apt:
            pkg:
              - unzip
              - jq
            state: present

        - name: 'Consul - Requirements: Ensure Consul group exist'
          ansible.builtin.group:
            name: "{{ consul_group }}"
            state: present

        - name: 'Consul - Requirements: Ensure Consul user exist'
          ansible.builtin.user:
            name: "{{ consul_user }}"
            group: "{{ consul_group }}"
            system: true
            create_home: true
            home: "{{ consul_config_path }}"

        - name: 'Consul - Requirements: Ensure Consul directories exists'
          ansible.builtin.file:
            path: "{{ item }}"
            state: directory
            owner: "{{ consul_user }}"
            group: "{{ consul_group }}"
            mode: '0755'
          with_items:
            - "{{ consul_data_path }}"
            - "{{ consul_logs_path }}"
            - "{{ consul_tls_path }}"

    - name: Consul - Certificate
      block:
        - name: Consul - Certificate - Root
          block:
            - name: 'Consul - Certificate - Root: Read Root CA Certificate'
              delegate_to: localhost
              become: false
              ansible.builtin.slurp:
                src: "{{ pki_ca_certificate_file_path }}"
              register: ca_certificate

            - name: 'Consul - Certificate - Root: Ensure certificate exist'
              ansible.builtin.copy:
                dest: "{{ pki_ca_certificate_dest_file_path }}"
                content: "{{ ca_certificate.content | b64decode }}"
                mode: '0644'

            - name: 'Consul - Certificate - Root: Trust Root CA certificate'
              ansible.builtin.command: 'update-ca-certificates -f'
              changed_when: update_ca_certificate.rc != 0
              register: update_ca_certificate

        - name: Consul - Certificate - Agent
          block:
            - name: 'Consul - Certificate - Agent: Ensure intermediate ca certificate exists'
              ansible.builtin.copy:
                src: "{{ pki_consul_ca_certificate_file_path }}"
                dest: "{{ consul_ca_certificate_file_path }}"
                owner: "{{ consul_user }}"
                group: "{{ consul_group }}"
                mode: '0400'

            - name: 'Consul - Certificate - Agent: Ensure certificate exist'
              ansible.builtin.copy:
                src: "{{ pki_consul_agent_certificate_file_path }}"
                dest: "{{ consul_agent_certificate_file_path }}"
                owner: "{{ consul_user }}"
                group: "{{ consul_group }}"
                mode: '0400'

            - name: 'Consul - Certificate - Agent: Ensure certificate key exist'
              ansible.builtin.copy:
                src: "{{ pki_consul_agent_certificate_key_file_path }}"
                dest: "{{ consul_agent_certificate_key_file_path }}"
                owner: "{{ consul_user }}"
                group: "{{ consul_group }}"
                mode: '0400'

        - name: Consul - Certificate - User
          when: ansible_hostname in groups['hcp-servers']
          block:
            - name: 'Consul - Certificate - User: Ensure user directories exists'
              ansible.builtin.file:
                path: "{{ consul_cli_path }}"
                state: directory
                owner: "{{ item.name }}"
                group: "{{ item.name }}"
                mode: '0644'
              with_items: "{{ common_cli_users }}"

            - name: 'Consul - Certificate - User: Ensure intermediate ca certificate exist'
              ansible.builtin.copy:
                src: "{{ pki_consul_ca_certificate_file_path }}"
                dest: "{{ consul_cli_ca_certificate_file_path }}"
                owner: "{{ item.name }}"
                group: "{{ item.name }}"
                mode: '0400'
              with_items: "{{ common_cli_users }}"

            - name: 'Consul - Certificate - User: Ensure certificate exist'
              ansible.builtin.copy:
                src: "{{ pki_consul_cli_certificate_file_path }}"
                dest: "{{ consul_cli_certificate_file_path }}"
                owner: "{{ item.name }}"
                group: "{{ item.name }}"
                mode: '0400'
              with_items: "{{ common_cli_users }}"
              loop_control:
                index_var: index

            - name: 'Consul - Certificate - User: Ensure certificate key exist'
              ansible.builtin.copy:
                src: "{{ pki_consul_cli_certificate_key_file_path }}"
                dest: "{{ consul_cli_certificate_key_file_path }}"
                owner: "{{ item.name }}"
                group: "{{ item.name }}"
                mode: '0400'
              with_items: "{{ common_cli_users }}"
              loop_control:
                index_var: index

    - name: Consul - Gossip
      delegate_to: localhost
      run_once: true
      become: false
      block:
        - name: 'Consul - Gossip: Ensure secrets directory exist'
          ansible.builtin.file:
            path: "{{ consul_secret_root_path }}"
            state: directory
            mode: '0755'

        - name: 'Consul - Gossip: Check if Gossip encryption key file exist'
          ansible.builtin.stat:
            path: "{{ consul_gossip_encryption_key_file_path }}"
          register: consul_gossip_encryption_key_info

        - name: 'Consul - Gossip: Ensure Gossip encryption key exist'
          when: not consul_gossip_encryption_key_info.stat.exists
          ansible.builtin.copy:
            content: "{{ lookup('community.general.random_string', length=32, base64=False) }}"
            dest: "{{ consul_gossip_encryption_key_file_path }}"
            mode: '755'

        - name: 'Consul - Gossip: Read Gossip encryption key'
          ansible.builtin.slurp:
            src: "{{ consul_gossip_encryption_key_file_path }}"
          register: consul_gossip_encryption_key_file

    - name: Consul - Deployment
      block:
        - name: 'Consul - Deployment: Ensure Consul is installed'
          ansible.builtin.unarchive:
            src: "https://releases.hashicorp.com/consul/{{ consul_version }}/consul_{{ consul_version }}_{{ common_os_type }}_{{ common_os_arch }}.zip"
            dest: "{{ consul_bin_path }}"
            remote_src: true

        - name: 'Consul - Deployment: Ensure gossip encryption key is set as a fact'
          ansible.builtin.set_fact:
            consul_gossip_encryption_key: "{{ consul_gossip_encryption_key_file.content }}"

        - name: 'Consul - Deployment: general config file exist'
          ansible.builtin.template:
            src: consul/configs/general.hcl.j2
            dest: "{{ consul_config_path }}/general.hcl"
            owner: "{{ consul_user }}"
            group: "{{ consul_group }}"
            mode: '0600'

        - name: 'Consul - Deployment: server config file exist'
          when: ansible_hostname in groups['hcp-servers']
          ansible.builtin.template:
            src: consul/configs/server.hcl.j2
            dest: "{{ consul_config_path }}/server.hcl"
            owner: "{{ consul_user }}"
            group: "{{ consul_group }}"
            mode: '0600'

        - name: 'Consul - Deployment: Ensure client config file exist'
          when: ansible_hostname in groups['hcp-clients']
          ansible.builtin.template:
            src: consul/configs/client.hcl.j2
            dest: "{{ consul_config_path }}/client.hcl"
            owner: "{{ consul_user }}"
            group: "{{ consul_group }}"
            mode: '0600'

        - name: 'Consul - Deployment: Ensure Consul service file exist'
          ansible.builtin.template:
            src: consul/consul.service.j2
            dest: "{{ consul_service_path }}/consul.service"
            owner: "{{ consul_user }}"
            group: "{{ consul_group }}"
            mode: '0755'

        - name: 'Consul - Deployment: Ensure Consul service is enabled and reloaded'
          ansible.builtin.systemd:
            name: consul.service
            enabled: true
            state: started
            daemon_reload: true

        - name: 'Consul - Deployment: Ensure Consul is running'
          when: ansible_hostname in groups['hcp-servers']
          ansible.builtin.wait_for:
            port: 8500
            state: started
            sleep: 5

    - name: 'Consul: Ensure CLI variables are set as a fact'
      when: item.name == multipass_ansible_user
      ansible.builtin.set_fact:
        consul_http_addr: https://localhost:8500
        consul_ca_cert: "{{ consul_cli_ca_certificate_file_path }}"
        consul_client_cert: "{{ consul_cli_certificate_file_path }}"
        consul_client_key: "{{ consul_cli_certificate_key_file_path }}"
      with_items: "{{ common_cli_users }}"

    - name: Consul - ACL
      block:
        - name: Consul - ACL - Boostrap
          delegate_to: "{{ groups['hcp-servers'] | first }}"
          run_once: true
          block:
            - name: 'Consul - ACL - Boostrap: Check if bootstrap token file exist'
              delegate_to: localhost
              become: false
              ansible.builtin.stat:
                path: "{{ consul_boostrap_acl_token_file_path }}"
              register: bootstrap_token_info

            - name: 'Consul - ACL - Boostrap: Bootstrap consul'
              when: not bootstrap_token_info.stat.exists
              ansible.builtin.shell: |
                set -o pipefail
                {{ consul_binary_file_path }} acl bootstrap -format=json | jq -r '.SecretID'
              args:
                executable: /bin/bash
              environment:
                CONSUL_HTTP_ADDR: "{{ consul_http_addr }}"
                CONSUL_CACERT: "{{ consul_ca_cert }}"
                CONSUL_CLIENT_CERT: "{{ consul_client_cert }}"
                CONSUL_CLIENT_KEY: "{{ consul_client_key }}"
              changed_when: bootstrap_acl_cmd.rc != 0
              register: bootstrap_acl_cmd

            - name: 'Consul - ACL - Boostrap: Save boostrap token to file'
              delegate_to: localhost
              become: false
              when: not bootstrap_token_info.stat.exists
              ansible.builtin.copy:
                content: "{{ bootstrap_acl_cmd.stdout }}"
                dest: "{{ consul_boostrap_acl_token_file_path }}"
                mode: "755"

            - name: 'Consul - ACL - Boostrap: Read bootstrap token'
              delegate_to: localhost
              become: false
              ansible.builtin.slurp:
                src: "{{ consul_boostrap_acl_token_file_path }}"
              register: bootstrap_token_file

            - name: 'Consul - ACL - Boostrap: Ensure bootstrap token is set as a fact'
              ansible.builtin.set_fact:
                consul_bootstrap_token: "{{ bootstrap_token_file.content | b64decode }}"

        - name: Consul - ACL - Policies
          delegate_to: "{{ groups['hcp-servers'] | first }}"
          run_once: true
          block:
            - name: 'Consul - ACL - Policies: Ensure policies files exist'
              ansible.builtin.copy:
                src: "{{ item.src }}"
                dest: "{{ item.dest }}"
                mode: '0644'
              with_items: "{{ consul_policies }}"

            - name: 'Consul - ACL - Policies: Get all policy names existsing in Consul'
              ansible.builtin.shell: |
                set -o pipefail
                {{ consul_binary_file_path }} acl policy list -format=json | jq -r '.[].Name'
              args:
                executable: /bin/bash
              environment:
                CONSUL_HTTP_ADDR: "{{ consul_http_addr }}"
                CONSUL_CACERT: "{{ consul_ca_cert }}"
                CONSUL_CLIENT_CERT: "{{ consul_client_cert }}"
                CONSUL_CLIENT_KEY: "{{ consul_client_key }}"
                CONSUL_HTTP_TOKEN: "{{ consul_bootstrap_token }}"
              changed_when: consul_policies_cmd.rc != 0
              register: consul_policies_cmd

            - name: 'Consul - ACL - Policies: Ensure policies to create are set as a fact'
              when: item.name not in consul_policies_cmd.stdout
              ansible.builtin.set_fact:
                policies_to_create: "{{ policies_to_create | default([]) + [item] }}"
              with_items: "{{ consul_policies }}"

            - name: 'Consul - ACL - Policies: policies are present in Consul'
              when: policies_to_create is not undefined
              ansible.builtin.command: "{{ consul_binary_file_path }} acl policy create -name {{ item.name }} -rules @{{ item.dest }}"
              environment:
                CONSUL_HTTP_ADDR: "{{ consul_http_addr }}"
                CONSUL_CACERT: "{{ consul_ca_cert }}"
                CONSUL_CLIENT_CERT: "{{ consul_client_cert }}"
                CONSUL_CLIENT_KEY: "{{ consul_client_key }}"
                CONSUL_HTTP_TOKEN: "{{ consul_bootstrap_token }}"
              changed_when: consul_policy_cmd.rc != 0
              register: consul_policy_cmd
              with_items: "{{ policies_to_create }}"

            - name: 'Consul - ACL - Policies: Ensure policy files are deleted'
              ansible.builtin.file:
                path: "{{ item.dest }}"
                state: absent
              with_items: "{{ consul_policies }}"

        - name: Consul - ACL - Tokens
          block:
            - name: 'Consul - ACL - Tokens: Ensure token directory exist'
              delegate_to: localhost
              become: false
              ansible.builtin.file:
                path: "{{ consul_token_path }}"
                state: directory
                mode: '0755'

            - name: 'Consul - ACL - Tokens: Check if token file exist'
              delegate_to: localhost
              become: false
              ansible.builtin.stat:
                path: "{{ item }}"
              register: consul_tokens_info
              with_items:
                - "{{ consul_agent_token_file_path }}"
                - "{{ consul_dns_requests_token_file_path }}"

            - name: 'Consul - ACL - Tokens: Generate agent and dns requests tokens for all nodes'
              when: not consul_tokens_info.results[index].stat.exists
              delegate_to: "{{ groups['hcp-servers'] | first }}"
              ansible.builtin.shell: |
                set -o pipefail
                {{ consul_binary_file_path }} acl token create -description '{{ item.description }}' -policy-name {{ item.name }} -format=json | jq -r '.SecretID'
              args:
                executable: /bin/bash
              environment:
                CONSUL_HTTP_ADDR: "{{ consul_http_addr }}"
                CONSUL_CACERT: "{{ consul_ca_cert }}"
                CONSUL_CLIENT_CERT: "{{ consul_client_cert }}"
                CONSUL_CLIENT_KEY: "{{ consul_client_key }}"
                CONSUL_HTTP_TOKEN: "{{ consul_bootstrap_token }}"
              changed_when: consul_tokens_cmd.rc != 0
              register: consul_tokens_cmd
              with_items: "{{ consul_policies }}"
              loop_control:
                index_var: index

            - name: 'Consul - ACL - Tokens: Save generated token to the file'
              when: not consul_tokens_info.results[index].stat.exists
              delegate_to: localhost
              become: false
              ansible.builtin.copy:
                content: "{{ consul_tokens_cmd.results[index].stdout }}"
                dest: "{{ item }}"
                mode: "755"
              with_items:
                - "{{ consul_agent_token_file_path }}"
                - "{{ consul_dns_requests_token_file_path }}"
              loop_control:
                index_var: index

            - name: 'Consul - ACL - Tokens:  Read agent and dns requests token from the file'
              delegate_to: localhost
              become: false
              ansible.builtin.slurp:
                src: "{{ item }}"
              register: consul_tokens_file
              with_items:
                - "{{ consul_agent_token_file_path }}"
                - "{{ consul_dns_requests_token_file_path }}"

            - name: 'Consul - ACL - Tokens: Ensure agent and dns requests token are set as a facts'
              ansible.builtin.set_fact:
                consul_agent_token: "{{ consul_tokens_file.results[0].content | b64decode }}"
                consul_dns_requests_token: "{{ consul_tokens_file.results[1].content | b64decode }}"

            - name: 'Consul - ACL - Tokens: Ensure agent token is part of the configuration'
              ansible.builtin.lineinfile:
                path: "{{ consul_config_path }}/general.hcl"
                regexp: '#agent   = ""'
                line: '    agent   = "{{ consul_agent_token }}"'
              notify: Restart Consul

            - name: 'Consul - ACL - Tokens: Ensure dns token is part of the configuration'
              ansible.builtin.lineinfile:
                path: "{{ consul_config_path }}/general.hcl"
                regexp: '#default = ""'
                line: '    default = "{{ consul_dns_requests_token }}"'
              notify: Restart Consul

    - name: Consul - Forward DNS
      block:
        - name: 'Consul - Forward DNS: Ensure resolved.conf.d directory exists'
          ansible.builtin.file:
            path: /etc/systemd/resolved.conf.d
            state: directory
            owner: root
            group: root
            mode: '755'

        - name: 'Consul - Forward DNS: Ensure Consul config for systemd-resolved exists'
          ansible.builtin.template:
            src: templates/consul/consul.conf.j2
            dest: /etc/systemd/resolved.conf.d/consul.conf
            owner: root
            group: root
            mode: '644'

        - name: 'Consul - Forward DNS: Ensure systemd-resolved service is restarted'
          ansible.builtin.systemd:
            name: systemd-resolved.service
            enabled: true
            state: restarted
            daemon_reload: true

  handlers:
    - name: Restart Consul
      ansible.builtin.service:
        name: consul.service
        state: restarted
